#include <unistd.h>

int	ft_isalpha(unsigned char c) //1
{
	if ((c < 'A' || c > 'Z')
			&& (c < 'a' || c > 'z'))
		return (0);
	return (1);
}

int	ft_isdigit(unsigned char c) //2
{
	if (!(c >= '0' && c <= '9'))
		return (0);
	return (1);
}

int ft_isalnum(char c) //3
{
	if (ft_isalpha(c) == 1 || ft_isdigit(c) == 1)
			return (1);
	return (0);
}

int	ft_isascii(char c) //4 ??
{
	if (c >= 0 && c <= 127)
		return (1);
	return (0);
}


int	ft_isprint(unsigned char c) //5
{
	if (c >= 32 && c <= '~')
		return (1);
	return (0);
}

int	ft_strlen(char *str) //6
{
	int	a;

	a = 0;
	while (str[a] != '\0')
	{
		a++;
	}
	return (a);
}

char *ft_memset(char *str, char c, int n) //7 ?? Retorno adecuado ??
{
	while (n >= 0)
	{
		*(str + n) = c;
		n--;
	}
	return (str);
}

char *ft_bzero(char *str, int n)
{
	while (n >= 0)
	{
		*(str + n) = '0';
		n--;
	}
	return (str);
}



unsigned int	ft_strlcpy(char *dest, char *src, unsigned int size) //11
{
	unsigned int	i;
	unsigned int	pos;

	i = 0;
	pos = 0;
	while (src[i] != '\0')
		i++;
	if (size != 0)
	{
		while (src[pos] != '\0' && pos < (size - 1))
		{
			dest[pos] = src[pos];
			pos++;
		}
		dest[pos] = '\0';
	}
	return (i);
}

int	counter(char *ptr) //12
{
	int	c;

	c = 0;
	while (ptr[c] != '\0')
	{
		c++;
	}
	return (c);
}

unsigned int	ft_strlcat(char *dest, char *src, unsigned int size) //12
{
	unsigned int	a;
	int				b;
	int				c;
	int				retorno;

	a = 0;
	c = counter(src);
	b = counter(dest);
	b++;
	while (a < (size - 1))
	{
		dest[b] = src[a];
		a++;
		b++;
	}
	retorno = b + c;
	return (retorno);
}



